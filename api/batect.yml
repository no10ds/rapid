containers:
  service-image:
    build_directory: .
    dockerfile: Dockerfile
    working_directory: /app
    build_args:
      commit_sha: ${GITHUB_SHA:-unknown}
      version: ${GITHUB_REF_NAME:-unknown}
    run_as_current_user:
      enabled: true
      home_directory: /home/batect-container-user
    volumes:
      - local: .
        container: /app
    environment:
      AWS_ACCOUNT: ${AWS_ACCOUNT:-}
      AWS_REGION: ${AWS_REGION:-eu-west-2}
      AWS_DEFAULT_REGION: ${AWS_REGION:-eu-west-2}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID:-}
      DATA_BUCKET: ${DATA_BUCKET:-}
      DOMAIN_NAME: ${DOMAIN_NAME:-}
      ALLOWED_EMAIL_DOMAINS: ${ALLOWED_EMAIL_DOMAINS:-}
      RESOURCE_PREFIX: ${RESOURCE_PREFIX:-prefix}

tasks:
  runtime-environment:
    description: Build runtime environment
    run:
      container: service-image
      command: sh -c 'echo "Environment created - Docker image \"rapid-api-service-image\""'

  run-custom-task:
    description: Run a pre-defined task in the container, defined in task_runner.sh
    run:
      container: service-image

  shell:
    description: Shell into the container
    run:
      container: service-image
      command: bash

  run-app:
    description: Run the app locally
    run:
      container: service-image
      environment:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
        AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
      ports:
        - local: 8000
          container: 8000

  run-local-dev:
    description: Run the app locally in dev mode
    run:
      container: service-image
      environment:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
        AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
      ports:
        - local: 8000
          container: 8000
      command: "uvicorn api.entry:app --host 0.0.0.0 --port 8000 --reload"

  test-unit:
    description: Run unit tests
    run:
      container: service-image
      command: "pytest test/api -v"

  test-unit-focus:
    description: Run unit tests
    run:
      container: service-image
      command: "pytest test/api -vv -m focus"

  test-e2e:
    description: Run E2E tests
    run:
      container: service-image
      environment:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
        AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
      command: "pytest test/e2e -v"

  test-e2e-focus:
    description: Run E2E tests in focus mode
    run:
      container: service-image
      environment:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
        AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
      command: "pytest test/e2e -v -m focus"

  test-coverage:
    description: Run all tests with coverage report for source code only
    run:
      container: service-image
      command: "pytest --durations=5 --cov=api --cov-report term-missing test/api"

  detect-secrets:
    description: Detect tracked files for secrets
    run:
      container: service-image
      command: sh -c 'git ls-files -z -- . ':!:*.drawio' | xargs -0 detect-secrets-hook --baseline .secrets.baseline'

  ignore-secrets:
    description: Ignore detected secrets (add them to the .secrets.baseline file)
    run:
      container: service-image
      command: bash -c 'detect-secrets scan > .secrets.baseline'

  detect-vulnerabilities:
    description: Detect common vulnerabilities
    run:
      container: service-image
      command: "bandit -qr api"

  lint:
    description: Lint the source and test code
    run:
      container: service-image
      command: "flake8 api test"

  format:
    description: Format the source and test code
    run:
      container: service-image
      command: "black api test"

  generate_latest_changelog:
    description: Parse the changelog file for the release's changes
    run:
      container: service-image
      command: "python get_latest_release_changelog.py"
